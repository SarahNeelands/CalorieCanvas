/* ==== DESKTOP: lock the stage ==== */
:root {
  /* Use rem-based tokens so these scale with the root font-size */
  --stage-w: 87.5rem;   /* 1400px */
  --left-w: 48.75rem;   /* 780px */
  --right-w: 22.5rem;   /* 360px */
  --gap: 2.5rem;        /* 40px */
}

.container {
  /* Make the container responsive: grow with viewport but cap at --stage-w */
wwidth: min(100%, 90vw); /* allow container to expand on large screens */
  margin: 0 auto;
  padding: 2rem 0.75rem; /* 32px 12px */
  position: relative;
  z-index: 1;          /* above decorative leaves */
}

.grid {
  display: grid;
  /* Let the left column expand to fill available space while keeping the right
     column at a predictable width. This keeps the page feeling "filled" on
     large screens without breaking the Quick Actions column. */
  grid-template-columns: 1fr var(--right-w);
  gap: var(--gap);
  align-items: start;
}

/* Cap the actual cards so they never stretch past the designed widths */
.grid > :first-child,
.calorie-summary,
.recent-meals {
  /* Allow these to fill the available left column width instead of hard-capping
     them. Cards will now expand with the left column on large screens. */
  width: 100%;
  max-width: none;
}

.grid > :last-child,
.quick-actions,
.frame {
  width: var(--right-w);
  max-width: var(--right-w);
}

/* Decorative leaves stay out of layout and scale gently */
.tl, .br {
  position: fixed;
  pointer-events: none;
  z-index: 0;
}
.tl { top: 0; left: 0; width: clamp(11.25rem, 22vw, 20rem); }
.br { right: 0; bottom: 0; width: clamp(12.5rem, 26vw, 23.75rem); transform: scaleX(-1); }

/* Typography: fixed on desktop (no vw) for identical look */
/* Typography uses rems so it scales with the responsive root font-size */
h1 { font-size: 2rem; }
h2 { font-size: 1.5rem; }
body { font-size: 1rem; line-height: 1.5; }

/* ==== BELOW TABLET: switch to the responsive stack ==== */
@media (max-width: 980px) {
  .container { width: min(100%, calc(100vw - 1.5rem)); }
  .grid { grid-template-columns: 1fr; gap: 1.5rem; }
  .grid > * { width: 100%; max-width: 100%; }
}
